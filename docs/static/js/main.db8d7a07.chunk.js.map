{"version":3,"sources":["components/AddCategory.js","components/helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","components/hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,QAM1C,UACI,8CACA,uBACIC,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAadM,GAbc,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,sBAAKc,UAAU,4DAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCCGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDTmBK,CAAa1B,GAA/BoB,EAH+B,EAG/BA,QAASb,EAHsB,EAGtBA,KAIjB,OACE,qCACE,6BAAKP,IACJoB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SACGT,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEfnBgB,EAAe,WAAM,MAIMzC,mBAAS,CAAC,cAJhB,mBAIvB0C,EAJuB,KAIX3C,EAJW,KAa9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAf,GAAI,OACf,cAAC,EAAD,CAEIM,SAAUN,GADHA,Y,MCtBnCmC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.db8d7a07.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cate => [inputValue, ...cate]);\n        }\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2>Add Category</h2>\n            <input\n                type='text'\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    //obliga a enviar el componente con la función incluída\n    //de otra manera no se podría importar\n    setCategories: PropTypes.func.isRequired\n}\n\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=UhW120WopevpLdlsnSymxyM4uWcCBKZI`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className='animate__fateIn card animate__animated animate__heartBeat'>\n      <img src={url} alt={title}></img>\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { useFetchGifs } from \"./hooks/useFetchGifs\";\n// import React, { useState, useEffect } from \"react\";\nimport { GifGridItem } from \"./GifGridItem\";\n// import { getGifs } from \"./helpers/GetGifs\";\n\nexport const GifGrid = ({ category }) => {\n  // const [images, setImages] = useState([]);\n\n  const { loading, data } = useFetchGifs(category);\n\n  //const api_key = \"UhW120WopevpLdlsnSymxyM4uWcCBKZI\";\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>Loading</p>  }\n      <div className=\"card-grid\">\n        {data.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state; // {data:[], loading: true}\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Dragon Ball']\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    const handleAdd = () => {\n        //forma 1\n        //setCategories([...categories, 'HunterXHunter'])\n        //forma 2, con callback\n        // setCategories(cate => [...cate, 'HunterXHunter'])\n    }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            <ol>\n                {\n                    categories.map(cate => (\n                        <GifGrid\n                            key = {cate} \n                            category={cate} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}